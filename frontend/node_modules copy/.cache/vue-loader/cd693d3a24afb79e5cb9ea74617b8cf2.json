{"remainingRequest":"C:\\inżynierka\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\inżynierka\\frontend\\src\\components\\post\\AddPlace.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\inżynierka\\frontend\\src\\components\\post\\AddPlace.vue","mtime":1645547587811},{"path":"C:\\inżynierka\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1645547150279},{"path":"C:\\inżynierka\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1645547152282},{"path":"C:\\inżynierka\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1645547150279},{"path":"C:\\inżynierka\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1645547152770}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["AddPlace.vue"],"names":[],"mappingsfile":"AddPlace.vue","sourceRoot":"src/components/post","sourcesContent":["<template>\r\n    <v-container>\r\n        <v-card>\r\n            <v-text-field\r\n                class=\"mt-5\"\r\n                v-model=\"localization\"\r\n                label=\"Lokalizacja\"\r\n            ></v-text-field>\r\n            <v-text-field\r\n                class=\"mt-5\"\r\n                v-model=\"category\"\r\n                label=\"Kategoria\"\r\n            ></v-text-field>\r\n            <v-textarea\r\n                class=\"mt-5\"\r\n                v-model=\"description\"\r\n                label=\"Opis\"\r\n            ></v-textarea>\r\n            <div\r\n                @dragover=\"dragover\"\r\n                @dragleave=\"dragleave\"\r\n                @drop=\"drop\"\r\n            >\r\n                <v-file-input\r\n                    accept=\"image/png, image/jpeg, image/bmp, image/img\"\r\n                    prepend-icon=\"mdi-camera\"\r\n                    ref=\"imginput\"\r\n                    chips\r\n                    multiple\r\n                    label=\"Zdjęcia\"\r\n                    :rules=\"imageRules\"\r\n                    v-model=\"images\"\r\n                    @change=\"onAddFiles\"\r\n                ></v-file-input>\r\n            </div>\r\n            <div id=\"map\" style=\"height: 360px; width: 640px;\"></div>\r\n            <v-btn\r\n                color=\"success\"\r\n                @click=\"addPost\"\r\n            >dodaj\r\n            </v-btn>\r\n        </v-card>\r\n    </v-container>\r\n</template>\r\n<script>\r\nimport {axiosAPI} from '../../axiosAPI';\r\nimport { Loader } from '@googlemaps/js-api-loader';\r\nexport default {\r\n    data(){\r\n        return {\r\n            localization: \"\",\r\n            category: \"\",\r\n            description: \"\",\r\n            images: [],\r\n            convertedImages: [],\r\n            allowedTypes: \"image/png, image/jpeg, image/bmp, image/img\",\r\n            imageRules: [\r\n                v => {\r\n                    var hasDuplicates = false\r\n                    var checkedValues = []\r\n                    v.forEach(value => {\r\n                        if (checkedValues.some(val => val.name == value.name)) {\r\n                            hasDuplicates = true\r\n                        }\r\n                        checkedValues.push(value)\r\n                    })\r\n                    return !hasDuplicates || 'Dodano już podany plik'},\r\n                v => !v || !v.some(value => !this.allowedTypes.includes(value.type)) || 'Podano niewłaściwy format pliku. Dopuszczalne formaty: png, jpg, jpeg, bmp, img',\r\n            ],\r\n            loader: new Loader({\r\n                apiKey: \"AIzaSyAp_-toJueZxOObe0RxxmXvVyoS_jW4CQU\",\r\n                version: \"weekly\",\r\n                libraries: [\"places\"]\r\n            }),\r\n            mapOptions: {\r\n                center: {\r\n                    lat: 0,\r\n                    lng: 0\r\n                },\r\n                zoom: 4\r\n            }\r\n        }\r\n    },\r\n    async mounted() {\r\n        this.loader\r\n            .load()\r\n            .then((google) => {\r\n                const map = new google.maps.Map(document.getElementById(\"map\"), this.mapOptions);\r\n                map.addListener(\"click\", (mapsMouseEvent) => {\r\n                    let infoWindow = new google.maps.InfoWindow({\r\n                        position: mapsMouseEvent.latLng,\r\n                    });\r\n                    console.log(infoWindow)\r\n                    console.log(mapsMouseEvent)\r\n                    new google.maps.Marker({\r\n                        position: mapsMouseEvent.latLng,\r\n                        map,\r\n                        title: \"Hello World!\",\r\n                    });\r\n                });\r\n            })\r\n            .catch(()=> {\r\n                // do something\r\n            });\r\n    },\r\n    methods: {\r\n        addPost(){\r\n            const formData = new FormData();\r\n            formData.append(\"localization\", this.localization);\r\n            formData.append(\"category\", this.category);\r\n            formData.append(\"description\", this.description);\r\n            this.convertedImages.forEach((image) => {\r\n                formData.append(\"images\", image, image.name);\r\n            })\r\n            console.log(formData.getAll(\"images\"))\r\n            axiosAPI.post(\"/api/post\",formData,{\r\n                headers: { \r\n                    ...axiosAPI.headers,\r\n                    'content-type': 'multipart/form-data'\r\n            }}).then(res => {\r\n                localStorage.setItem('token', res.data.token);\r\n                this.setUser(res.data.user)\r\n            }).catch(err => {\r\n                console.log(\"err\")\r\n                console.log(err)\r\n            })\r\n        },\r\n        onAddFiles (files) {\r\n            if(files.length == 0){\r\n                this.convertedImages = []\r\n            }\r\n            files.forEach((file) => {\r\n                const reader = new FileReader()\r\n                reader.readAsArrayBuffer(file);\r\n                const self = this\r\n                reader.onload = function (event) {\r\n                    var blob = new Blob([event.target.result]);\r\n                    var blobURL = URL.createObjectURL(blob);\r\n                    var image = new Image()\r\n                    image.src = blobURL;\r\n                    image.onload = async function() {\r\n                        var resized = self.resizeMe(image);\r\n                        let file = await fetch(resized).then(r => r.blob()).then(blobFile => new File([blobFile], self.imgName(), { type: \"image/png\" }))\r\n                        self.convertedImages.push(file);\r\n                    }\r\n                };\r\n            })\r\n        },\r\n        resizeMe(img) {\r\n        \r\n            var canvas = document.createElement('canvas');\r\n\r\n            var width = img.width;\r\n            var height = img.height;\r\n            var max_width = 800;\r\n            var max_height = 800;\r\n            if (width > height) {\r\n                if (width > max_width) {\r\n                height = Math.round(height *= max_width / width);\r\n                width = max_width;\r\n                }\r\n            } else {\r\n                if (height > max_height) {\r\n                width = Math.round(width *= max_height / height);\r\n                height = max_height;\r\n                }\r\n            }\r\n            canvas.width = width;\r\n            canvas.height = height;\r\n            var ctx = canvas.getContext(\"2d\");\r\n            ctx.drawImage(img, 0, 0, width, height);\r\n            return canvas.toDataURL(\"image/jpeg\",0.8);\r\n\r\n        },\r\n        imgName() {\r\n            var result = '';\r\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n            var charactersLength = characters.length;\r\n            for ( var i = 0; i < 20; i++ ) {\r\n                result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n            }\r\n            return result;\r\n        },\r\n        dragover(event) {\r\n            event.preventDefault();\r\n            this.$refs.imginput.focus()\r\n        },\r\n        dragleave(event) {\r\n            event.preventDefault();\r\n            this.$refs.imginput.blur()\r\n        },\r\n        drop(event) {\r\n            event.preventDefault();\r\n            this.onAddFiles(Array.from(event.dataTransfer.files))\r\n            this.images.push(...event.dataTransfer.files)\r\n            this.$refs.imginput.validate()\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style scoped>\r\n\r\n</style>"]}]}