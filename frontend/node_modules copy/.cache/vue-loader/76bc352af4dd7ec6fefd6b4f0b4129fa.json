{"remainingRequest":"C:\\inżynierka\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\inżynierka\\frontend\\src\\components\\post\\AddPlace.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\inżynierka\\frontend\\src\\components\\post\\AddPlace.vue","mtime":1646690113836},{"path":"C:\\inżynierka\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1645547150279},{"path":"C:\\inżynierka\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1645547152282},{"path":"C:\\inżynierka\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1645547150279},{"path":"C:\\inżynierka\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1645547152770}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IGF4aW9zQVBJIH0gZnJvbSAiQC9heGlvc0FQSSI7CmltcG9ydCBMb2NhbGl6YXRpb25TZWxlY3QgZnJvbSAiLi9Mb2NhbGl6YXRpb25TZWxlY3QudnVlIjsKZXhwb3J0IGRlZmF1bHQgewogIGNvbXBvbmVudHM6IHsKICAgIExvY2FsaXphdGlvblNlbGVjdCwKICB9LAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBsb2NhbGl6YXRpb246ICIiLAogICAgICBjYXRlZ29yeTogIiIsCiAgICAgIGRlc2NyaXB0aW9uOiAiIiwKICAgICAgaW1hZ2VzOiBbXSwKICAgICAgY29udmVydGVkSW1hZ2VzOiBbXSwKICAgICAgYWxsb3dlZFR5cGVzOiAiaW1hZ2UvcG5nLCBpbWFnZS9qcGVnLCBpbWFnZS9ibXAsIGltYWdlL2ltZyIsCiAgICAgIGltYWdlUnVsZXM6IFsKICAgICAgICAodikgPT4gewogICAgICAgICAgdmFyIGhhc0R1cGxpY2F0ZXMgPSBmYWxzZTsKICAgICAgICAgIHZhciBjaGVja2VkVmFsdWVzID0gW107CiAgICAgICAgICB2LmZvckVhY2goKHZhbHVlKSA9PiB7CiAgICAgICAgICAgIGlmIChjaGVja2VkVmFsdWVzLnNvbWUoKHZhbCkgPT4gdmFsLm5hbWUgPT0gdmFsdWUubmFtZSkpIHsKICAgICAgICAgICAgICBoYXNEdXBsaWNhdGVzID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjaGVja2VkVmFsdWVzLnB1c2godmFsdWUpOwogICAgICAgICAgfSk7CiAgICAgICAgICByZXR1cm4gIWhhc0R1cGxpY2F0ZXMgfHwgIkRvZGFubyBqdcW8IHBvZGFueSBwbGlrIjsKICAgICAgICB9LAogICAgICAgICh2KSA9PgogICAgICAgICAgIXYgfHwKICAgICAgICAgICF2LnNvbWUoKHZhbHVlKSA9PiAhdGhpcy5hbGxvd2VkVHlwZXMuaW5jbHVkZXModmFsdWUudHlwZSkpIHx8CiAgICAgICAgICAiUG9kYW5vIG5pZXfFgmHFm2Npd3kgZm9ybWF0IHBsaWt1LiBEb3B1c3pjemFsbmUgZm9ybWF0eTogcG5nLCBqcGcsIGpwZWcsIGJtcCwgaW1nIiwKICAgICAgXSwKICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICBhZGRQb3N0KCkgewogICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpOwogICAgICBmb3JtRGF0YS5hcHBlbmQoImxvY2FsaXphdGlvbiIsIHRoaXMubG9jYWxpemF0aW9uKTsKICAgICAgZm9ybURhdGEuYXBwZW5kKCJjYXRlZ29yeSIsIHRoaXMuY2F0ZWdvcnkpOwogICAgICBmb3JtRGF0YS5hcHBlbmQoImRlc2NyaXB0aW9uIiwgdGhpcy5kZXNjcmlwdGlvbik7CiAgICAgIHRoaXMuY29udmVydGVkSW1hZ2VzLmZvckVhY2goKGltYWdlKSA9PiB7CiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCJpbWFnZXMiLCBpbWFnZSwgaW1hZ2UubmFtZSk7CiAgICAgIH0pOwogICAgICBjb25zb2xlLmxvZyhmb3JtRGF0YS5nZXRBbGwoImltYWdlcyIpKTsKICAgICAgYXhpb3NBUEkKICAgICAgICAucG9zdCgiL2FwaS9wb3N0IiwgZm9ybURhdGEsIHsKICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgLi4uYXhpb3NBUEkuaGVhZGVycywKICAgICAgICAgICAgImNvbnRlbnQtdHlwZSI6ICJtdWx0aXBhcnQvZm9ybS1kYXRhIiwKICAgICAgICAgIH0sCiAgICAgICAgfSkKICAgICAgICAudGhlbigocmVzKSA9PiB7CiAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgidG9rZW4iLCByZXMuZGF0YS50b2tlbik7CiAgICAgICAgICB0aGlzLnNldFVzZXIocmVzLmRhdGEudXNlcik7CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goKGVycikgPT4gewogICAgICAgICAgY29uc29sZS5sb2coImVyciIpOwogICAgICAgICAgY29uc29sZS5sb2coZXJyKTsKICAgICAgICB9KTsKICAgIH0sCiAgICBvbkFkZEZpbGVzKGZpbGVzKSB7CiAgICAgIGlmIChmaWxlcy5sZW5ndGggPT0gMCkgewogICAgICAgIHRoaXMuY29udmVydGVkSW1hZ2VzID0gW107CiAgICAgIH0KICAgICAgZmlsZXMuZm9yRWFjaCgoZmlsZSkgPT4gewogICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzOwogICAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW2V2ZW50LnRhcmdldC5yZXN1bHRdKTsKICAgICAgICAgIHZhciBibG9iVVJMID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTsKICAgICAgICAgIHZhciBpbWFnZSA9IG5ldyBJbWFnZSgpOwogICAgICAgICAgaW1hZ2Uuc3JjID0gYmxvYlVSTDsKICAgICAgICAgIGltYWdlLm9ubG9hZCA9IGFzeW5jIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHJlc2l6ZWQgPSBzZWxmLnJlc2l6ZU1lKGltYWdlKTsKICAgICAgICAgICAgbGV0IGZpbGUgPSBhd2FpdCBmZXRjaChyZXNpemVkKQogICAgICAgICAgICAgIC50aGVuKChyKSA9PiByLmJsb2IoKSkKICAgICAgICAgICAgICAudGhlbigKICAgICAgICAgICAgICAgIChibG9iRmlsZSkgPT4KICAgICAgICAgICAgICAgICAgbmV3IEZpbGUoW2Jsb2JGaWxlXSwgc2VsZi5pbWdOYW1lKCksIHsgdHlwZTogImltYWdlL3BuZyIgfSkKICAgICAgICAgICAgICApOwogICAgICAgICAgICBzZWxmLmNvbnZlcnRlZEltYWdlcy5wdXNoKGZpbGUpOwogICAgICAgICAgfTsKICAgICAgICB9OwogICAgICB9KTsKICAgIH0sCiAgICByZXNpemVNZShpbWcpIHsKICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImNhbnZhcyIpOwoKICAgICAgdmFyIHdpZHRoID0gaW1nLndpZHRoOwogICAgICB2YXIgaGVpZ2h0ID0gaW1nLmhlaWdodDsKICAgICAgdmFyIG1heF93aWR0aCA9IDgwMDsKICAgICAgdmFyIG1heF9oZWlnaHQgPSA4MDA7CiAgICAgIGlmICh3aWR0aCA+IGhlaWdodCkgewogICAgICAgIGlmICh3aWR0aCA+IG1heF93aWR0aCkgewogICAgICAgICAgaGVpZ2h0ID0gTWF0aC5yb3VuZCgoaGVpZ2h0ICo9IG1heF93aWR0aCAvIHdpZHRoKSk7CiAgICAgICAgICB3aWR0aCA9IG1heF93aWR0aDsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKGhlaWdodCA+IG1heF9oZWlnaHQpIHsKICAgICAgICAgIHdpZHRoID0gTWF0aC5yb3VuZCgod2lkdGggKj0gbWF4X2hlaWdodCAvIGhlaWdodCkpOwogICAgICAgICAgaGVpZ2h0ID0gbWF4X2hlaWdodDsKICAgICAgICB9CiAgICAgIH0KICAgICAgY2FudmFzLndpZHRoID0gd2lkdGg7CiAgICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7CiAgICAgIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgiMmQiKTsKICAgICAgY3R4LmRyYXdJbWFnZShpbWcsIDAsIDAsIHdpZHRoLCBoZWlnaHQpOwogICAgICByZXR1cm4gY2FudmFzLnRvRGF0YVVSTCgiaW1hZ2UvanBlZyIsIDAuOCk7CiAgICB9LAogICAgaW1nTmFtZSgpIHsKICAgICAgdmFyIHJlc3VsdCA9ICIiOwogICAgICB2YXIgY2hhcmFjdGVycyA9CiAgICAgICAgIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5IjsKICAgICAgdmFyIGNoYXJhY3RlcnNMZW5ndGggPSBjaGFyYWN0ZXJzLmxlbmd0aDsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyMDsgaSsrKSB7CiAgICAgICAgcmVzdWx0ICs9IGNoYXJhY3RlcnMuY2hhckF0KAogICAgICAgICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2hhcmFjdGVyc0xlbmd0aCkKICAgICAgICApOwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9LAogICAgZHJhZ292ZXIoZXZlbnQpIHsKICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgdGhpcy4kcmVmcy5pbWdpbnB1dC5mb2N1cygpOwogICAgfSwKICAgIGRyYWdsZWF2ZShldmVudCkgewogICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICB0aGlzLiRyZWZzLmltZ2lucHV0LmJsdXIoKTsKICAgIH0sCiAgICBkcm9wKGV2ZW50KSB7CiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgIHRoaXMub25BZGRGaWxlcyhBcnJheS5mcm9tKGV2ZW50LmRhdGFUcmFuc2Zlci5maWxlcykpOwogICAgICB0aGlzLmltYWdlcy5wdXNoKC4uLmV2ZW50LmRhdGFUcmFuc2Zlci5maWxlcyk7CiAgICAgIHRoaXMuJHJlZnMuaW1naW5wdXQudmFsaWRhdGUoKTsKICAgIH0sCiAgfSwKfTsK"},{"version":3,"sources":["AddPlace.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AddPlace.vue","sourceRoot":"src/components/post","sourcesContent":["<template>\n  <v-container>\n    <v-card>\n      <v-text-field\n        class=\"mt-5\"\n        v-model=\"category\"\n        label=\"Kategoria\"\n      ></v-text-field>\n      <v-textarea class=\"mt-5\" v-model=\"description\" label=\"Opis\"></v-textarea>\n      <div @dragover=\"dragover\" @dragleave=\"dragleave\" @drop=\"drop\">\n        <v-file-input\n          accept=\"image/png, image/jpeg, image/bmp, image/img\"\n          prepend-icon=\"mdi-camera\"\n          ref=\"imginput\"\n          chips\n          multiple\n          label=\"Zdjęcia\"\n          :rules=\"imageRules\"\n          v-model=\"images\"\n          @change=\"onAddFiles\"\n        ></v-file-input>\n      </div>\n      <v-btn color=\"success\" @click=\"addPost\">dodaj </v-btn>\n    </v-card>\n    <localization-select/>\n  </v-container>\n</template>\n<script>\nimport { axiosAPI } from \"@/axiosAPI\";\nimport LocalizationSelect from \"./LocalizationSelect.vue\";\nexport default {\n  components: {\n    LocalizationSelect,\n  },\n  data() {\n    return {\n      localization: \"\",\n      category: \"\",\n      description: \"\",\n      images: [],\n      convertedImages: [],\n      allowedTypes: \"image/png, image/jpeg, image/bmp, image/img\",\n      imageRules: [\n        (v) => {\n          var hasDuplicates = false;\n          var checkedValues = [];\n          v.forEach((value) => {\n            if (checkedValues.some((val) => val.name == value.name)) {\n              hasDuplicates = true;\n            }\n            checkedValues.push(value);\n          });\n          return !hasDuplicates || \"Dodano już podany plik\";\n        },\n        (v) =>\n          !v ||\n          !v.some((value) => !this.allowedTypes.includes(value.type)) ||\n          \"Podano niewłaściwy format pliku. Dopuszczalne formaty: png, jpg, jpeg, bmp, img\",\n      ],\n    };\n  },\n  methods: {\n    addPost() {\n      const formData = new FormData();\n      formData.append(\"localization\", this.localization);\n      formData.append(\"category\", this.category);\n      formData.append(\"description\", this.description);\n      this.convertedImages.forEach((image) => {\n        formData.append(\"images\", image, image.name);\n      });\n      console.log(formData.getAll(\"images\"));\n      axiosAPI\n        .post(\"/api/post\", formData, {\n          headers: {\n            ...axiosAPI.headers,\n            \"content-type\": \"multipart/form-data\",\n          },\n        })\n        .then((res) => {\n          localStorage.setItem(\"token\", res.data.token);\n          this.setUser(res.data.user);\n        })\n        .catch((err) => {\n          console.log(\"err\");\n          console.log(err);\n        });\n    },\n    onAddFiles(files) {\n      if (files.length == 0) {\n        this.convertedImages = [];\n      }\n      files.forEach((file) => {\n        const reader = new FileReader();\n        reader.readAsArrayBuffer(file);\n        const self = this;\n        reader.onload = function (event) {\n          var blob = new Blob([event.target.result]);\n          var blobURL = URL.createObjectURL(blob);\n          var image = new Image();\n          image.src = blobURL;\n          image.onload = async function () {\n            var resized = self.resizeMe(image);\n            let file = await fetch(resized)\n              .then((r) => r.blob())\n              .then(\n                (blobFile) =>\n                  new File([blobFile], self.imgName(), { type: \"image/png\" })\n              );\n            self.convertedImages.push(file);\n          };\n        };\n      });\n    },\n    resizeMe(img) {\n      var canvas = document.createElement(\"canvas\");\n\n      var width = img.width;\n      var height = img.height;\n      var max_width = 800;\n      var max_height = 800;\n      if (width > height) {\n        if (width > max_width) {\n          height = Math.round((height *= max_width / width));\n          width = max_width;\n        }\n      } else {\n        if (height > max_height) {\n          width = Math.round((width *= max_height / height));\n          height = max_height;\n        }\n      }\n      canvas.width = width;\n      canvas.height = height;\n      var ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(img, 0, 0, width, height);\n      return canvas.toDataURL(\"image/jpeg\", 0.8);\n    },\n    imgName() {\n      var result = \"\";\n      var characters =\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n      var charactersLength = characters.length;\n      for (var i = 0; i < 20; i++) {\n        result += characters.charAt(\n          Math.floor(Math.random() * charactersLength)\n        );\n      }\n      return result;\n    },\n    dragover(event) {\n      event.preventDefault();\n      this.$refs.imginput.focus();\n    },\n    dragleave(event) {\n      event.preventDefault();\n      this.$refs.imginput.blur();\n    },\n    drop(event) {\n      event.preventDefault();\n      this.onAddFiles(Array.from(event.dataTransfer.files));\n      this.images.push(...event.dataTransfer.files);\n      this.$refs.imginput.validate();\n    },\n  },\n};\n</script>\n<style scoped></style>\n"]}]}